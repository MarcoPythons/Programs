--OPERADORES SET:  
--SON OPERADORES QUE ME PERMITEN TRABAJAR CON CONSULTAS INDEPENDIENTES.
--SON 4 OPERADORES.

--1.- UNION: ME PERMITE UNIR 2 CONSULTAS (ESTE ENTRA EN LA PRUEBA)

SELECT FIRST_NAME || ' ' || LAST_NAME ,'EMPLEADO DEL DEPTO 30'
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30

UNION
SELECT DEPARTMENT_NAME, 'DEPTOS CON JEFE'   
FROM DEPARTMENTS
WHERE MANAGER_ID IS NOT NULL
ORDER BY 2;

--PARA QUE EL UNION FUNCIONE, AMBAS CONSULTAS DEBEN TENER LA MISMA CANTIDAD DE COLUMNAS.
--EL UNION, POR DEFECTO, ORDENA DE FORMA ASCENDENTE POR LA PRIMERA COLUMNA


--------------------------------------------------------------------------------
SELECT FIRST_NAME || ' ' || LAST_NAME ,
DEPARTMENT_ID,
1000
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 10   

UNION

SELECT FIRST_NAME || ' ' || LAST_NAME ,
DEPARTMENT_ID,
'2000'
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20; 


--LAS COLUMNAS DE AMBAS CONSULTAS DEBEN SER DEL MISMO TIPO DE DATOS


SELECT FIRST_NAME || ' ' || LAST_NAME "NOMBRE COMPLETO",
DEPARTMENT_ID"DEPTO",
1000"BONO"
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 10   

UNION

SELECT FIRST_NAME || ' ' || LAST_NAME ,
DEPARTMENT_ID,
TO_NUMBER('2000')
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20
ORDER BY 2; 

--------------------------------------------------------------------------------

SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20
UNION 
SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;
--EL UNION ELIMINA LOS DATOS DUPLICADOS

----------

SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20
UNION ALL
SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;

--2.-EL UNION ALL NO ELIMINA DATOS DUPLICADOS Y TAMPOCO ORDENA POR DEFECTO


----------------------------------------------------------------------




--3.-MINUS: QUITA UN CONJUNTO DE DATOS DE UNO EXISTENTE


SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (20, 30)
MINUS
SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30;

--4- INTERSECT: OBTIENE LOS DATOS EN COMUN DE AMBOS DATOS

SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (20, 30)
INTERSECT
SELECT FIRST_NAME||' '||LAST_NAME, 
        DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30;





--SE DEBE GUARDAR EN LA TABLA DEPTO RESPALDO LA INFORMACION DE LOS DEPARTAMENTOS QUE POSEEN 
--MAS EMPLEADOS QUE EL PROMEDIO.
--ADEMAS, SE DEBEN GUARDAR LOS DEPARTAMENTOS QUE AUN NO TIENEN JEFE
INSERT INTO DEPTO_RESPALDO
SELECT DEP.DEPARTMENT_ID,
DEP.DEPARTMENT_NAME,
DEP.MANAGER_ID,
DEP.LOCATION_ID 

FROM DEPARTMENTS DEP LEFT JOIN EMPLOYEES EMP ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
GROUP BY DEP.DEPARTMENT_ID,
DEP.DEPARTMENT_NAME,
DEP.MANAGER_ID,
DEP.LOCATION_ID 
HAVING COUNT(EMP.EMPLOYEE_ID) > (SELECT ROUND(AVG(COUNT(EMP.EMPLOYEE_ID))) AS PROMEDIO
                FROM DEPARTMENTS DEP
                    LEFT JOIN EMPLOYEES EMP ON DEP.DEPARTMENT_ID = EMP.DEPARTMENT_ID
                GROUP BY DEP.DEPARTMENT_ID)
                UNION
SELECT DEPARTMENT_ID,
        DEPARTMENT_NAME,
        MANAGER_ID,
        LOCATION_ID
FROM DEPARTMENTS 
WHERE MANAGER_ID IS NULL
ORDER BY 2;

SELECT *
FROM DEPTO_RESPALDO;

INSERT INTO DEPTO_RESPALDO (department_id, department_name, MANAGER_ID, LOCATION_ID)
VALUES((SELECT MAX(DEPARTMENT_ID)+10 FROM DEPTO_RESPALDO),'DEPTO TEST',
(SELECT MAX(MANAGER_ID) FROM DEPARTMENTS),(SELECT MIN (LOCATION_ID)FROM DEPARTMENTS));